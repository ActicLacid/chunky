-- On Reboot, Returns to start position. -- 
local SLOT_COUNT = 16

local CLIENT_PORT = 0
local SERVER_PORT = 420

local modem = peripheral.wrap("left")
modem.open(CLIENT_PORT)
function checkForDroppedChest()
	local success, block = turtle.inspectUp()
	if success then
		if (block.name == "enderstorage:ender_storage") then
			turtle.digUp()
		end
	end
end
function split (inputstr, sep)
    if sep == nil then
            sep = "%s"
    end
    local t={}
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
            table.insert(t, str)
    end
    return t
end


function getItemIndex(name)
    for slot = 1, SLOT_COUNT, 1 do
        local item = turtle.getItemDetail(slot)
        if(item ~= nil) then
            if(item["name"] == name) then
                return slot
            end
        end
    end
    return nil
end


function parseParams(data)
    coords = {}
    params = split(data, " ")
    
    coords[1] = vector.new(params[1], params[2], params[3])
    coords[2] = vector.new(params[4], params[5], params[6])
    coords[3] = vector.new(params[7], params[8], params[9])

    return (coords)
end
function parseReturn(data)
	params = split(data, " ")
	target = vector.new(params[1], params[2], params[3])
	return target
end

function checkFuel()
    turtle.select(1)
    
    if(turtle.getFuelLevel() < 50) then
        manageInventory()
        index = getEnderIndex()
        if (index ~= nil) then
            turtle.select(index)
            turtle.digUp()
            turtle.placeUp()
            turtle.suckUp()
            turtle.select(getLavaIndex())
            turtle.refuel()
            turtle.dropUp()
            turtle.digUp()
            return true
        end
        return false
    else
        return true
    end
end


function getOrientation()
    loc1 = vector.new(gps.locate(2, false))
    if not turtle.forward() then
        for j=1,6 do
            if not turtle.forward() then
                turtle.dig()
            else 
                break 
            end
        end
    end
    loc2 = vector.new(gps.locate(2, false))
    heading = loc2 - loc1
    turtle.down()
    turtle.down()
    return ((heading.x + math.abs(heading.x) * 2) + (heading.z + math.abs(heading.z) * 3))
    end


function turnToFaceHeading(heading, destinationHeading)
    if(heading > destinationHeading) then
        for t = 1, math.abs(destinationHeading - heading), 1 do 
            turtle.turnLeft()
        end
    elseif(heading < destinationHeading) then
        for t = 1, math.abs(destinationHeading - heading), 1 do 
            turtle.turnRight()
        end
    end
end

function setHeadingZ(zDiff, heading)
    local destinationHeading = heading
    if(zDiff < 0) then
        destinationHeading = 2
    elseif(zDiff > 0) then
        destinationHeading = 4
    end
    turnToFaceHeading(heading, destinationHeading)

    return destinationHeading
end

function setHeadingX(xDiff, heading)
    local destinationHeading = heading
    if(xDiff < 0) then
        destinationHeading = 1
    elseif(xDiff > 0) then
        destinationHeading = 3
    end

    turnToFaceHeading(heading, destinationHeading)
    return destinationHeading
end

function digAndMove(n)
    for x = 1, n, 1 do
        while(turtle.detect()) do
            turtle.dig()
        end
        turtle.forward()
        checkFuel()
    end
end

function digAndMoveDown(n)
    for y = 1, n, 1 do
        print(y)
        while(turtle.detectDown()) do
            turtle.digDown()
        end
        turtle.down()
        checkFuel()
    end
end

function digAndMoveUp(n)
    for y = 1, n, 1 do
        while(turtle.detectUp()) do
            turtle.digUp()
        end
        turtle.up()
        checkFuel()
    end
end


function moveTo(coords, heading)
    local currX, currY, currZ = gps.locate()
    local xDiff, yDiff, zDiff = coords.x - currX, coords.y - currY, coords.z - currZ
    print(string.format("Distances from start: %d %d %d", xDiff, yDiff, zDiff))

    --    -x = 1
    --    -z = 2
    --    +x = 3
    --    +z = 4
    

    -- Move to X start
    heading = setHeadingX(xDiff, heading)
    digAndMove(math.abs(xDiff))

    -- Move to Z start
    heading = setHeadingZ(zDiff, heading)
    digAndMove(math.abs(zDiff))

    -- Move to Y start
    if(yDiff < 0) then    
        digAndMoveDown(math.abs(yDiff))
    elseif(yDiff > 0) then
        digAndMoveUp(math.abs(yDiff))
    end


    return heading
end


function calculateFuel(travels, digSize, fuelType)
    local currX, currY, currZ = gps.locate()
    local xDiff, yDiff, zDiff = travels.x - currX, travels.y - currY, travels.z - currZ

    local volume = digSize.x + digSize.y + digSize.z
    local travelDistance = (math.abs(xDiff) + math.abs(yDiff) + math.abs(zDiff)) * 2
    
    local totalFuel = volume + travelDistance
    print(string.format( "total steps: %d", totalFuel))

    if(fuelType == "minecraft:coal") then
        totalFuel = totalFuel / 80
    elseif(fuelType == "minecraft:coal_block") then
        totalFuel = totalFuel / 800
		elseif(fuelType == "minecraft:charcoal") then
        totalFuel = totalFuel / 80
    elseif(fuelType == "minecraft:lava_bucket") then
        totalFuel = totalFuel / 1000
    else
        print("INVALID FUEL SOURCE")
        os.exit(1)
    end

    return math.floor(totalFuel) + 5
end
function getEnderIndex()
    for slot = 1, SLOT_COUNT, 1 do
        local item = turtle.getItemDetail(slot)
        if(item ~= nil) then
            if(item["name"] == "enderstorage:ender_storage") then
                return slot
            end
        end
    end
    return nil
end
function getLavaIndex()
    for slot = 1, SLOT_COUNT, 1 do
        local item = turtle.getItemDetail(slot)
        if(item ~= nil) then
            if(item["name"] == "minecraft:lava_bucket") then
                return slot
            end
        end
    end
    return nil
end
function manageInventory()
    index = getEnderIndex()
    if(index ~= nil) then
        turtle.select(index)
        turtle.digUp()      
        turtle.placeUp()  
    end
    -- Chest is now deployed
    for slot = 1, SLOT_COUNT, 1 do
        if(item ~= nil) then
            turtle.select(slot)
            turtle.dropUp()
        end
    end
    -- Items are now stored

    turtle.digUp()
end
function returnTo(coords, heading)
    local currX, currY, currZ = gps.locate()
    local xDiff, yDiff, zDiff = coords.x - currX, coords.y - currY, coords.z - currZ
    print(string.format("Distances from end: %d %d %d", xDiff, yDiff, zDiff))
    
    -- Move to Y start
    if(yDiff < 0) then    
        digAndMoveDown(math.abs(yDiff))
    elseif(yDiff > 0) then
        digAndMoveUp(math.abs(yDiff))
    end
    manageInventory()
    -- Move to Z start
    heading = setHeadingZ(zDiff, heading)
    digAndMove(math.abs(zDiff))
    -- Move to X start
    heading = setHeadingX(xDiff, heading)
    digAndMove(math.abs(xDiff))

    
    
    

    return heading
end

checkForDroppedChest()
checkFuel()

local timeout = os.startTimer(1)
while true do
	modem.transmit(SERVER_PORT, CLIENT_PORT, "RETURN_REQUEST")
 	event = {os.pullEvent()}
	if event[1] == "modem_message" then
		event, side, senderChannel, replyChannel, msg, distance = event[1], event[2], event[3], event[4], event[5]
		target = vector.new(msg[1], msg[2]+1, msg[3])
    	local finalHeading = returnTo(vector.new(target.x, target.y-3, target.z+2), getOrientation())
    	manageInventory()
    	returnTo(target, finalHeading)
    	break
    elseif event[1] == "timer" and event[2] == timeout then
  		timeout = os.startTimer(1)
  	end
end

print("Executed emergency return.")
-- pastebin run wPtGKMam acticlacid chunky / /client/ .
